#include <Arduino.h>
#include <TFT_eSPI.h>

#include <2D_library.h>

#define btn_left_pin 0
#define btn_right_pin 35

bool current_state_left_btn = false;
bool last_state_left_btn = true;

bool current_state_right_btn = false;
bool last_state_right_btn = true;

uint8_t xpos = 0;

uint32_t mask_CACTUS[x_size][y_size] = {
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0xFFFF, 0x07E0, 0x07E0, 0xFFFF, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x07E0, 0x0001, 0x07E0, 0x07E0, 0x0001, 0x07E0, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x07E0, 0x0001, 0x07E0, 0x07E0, 0x0001, 0x07E0, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0001, 0x0001, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}
};

uint32_t mask_CACTUS1[x_size][y_size] = {
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0xFFFF, 0x07E0, 0x07E0, 0xFFFF, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x0001, 0x07E0, 0x07E0, 0x0001, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x07E0, 0x0001, 0x07E0, 0x07E0, 0x0001, 0x07E0, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0001, 0x0001, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}
};

uint32_t mask_CACTUS2[x_size][y_size] = {
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0xFFFF, 0x07E0, 0x07E0, 0xFFFF, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x07E0, 0x0001, 0x07E0, 0x07E0, 0x0001, 0x07E0, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000}, 
    {0x0000, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x07E0, 0x0001, 0x07E0, 0x07E0, 0x0001, 0x07E0, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x07E0, 0x07E0, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0001, 0x0001, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x07E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}, 
    {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x7800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}
};


TFT_eSPI tft = TFT_eSPI();



object2D last_cactus;
object2D new_cactus;





void tft_print_grid(){
  uint8_t h = pixel_size;
  for(uint8_t y=0; y<y_grid_size; y++){
    for(uint8_t x=0; x<x_grid_size; x++){
      tft.fillRect(x*h, y*h, h, h, grid[x][y]);
    }
  }
}
   
void btn_left_push(){
  current_state_left_btn = digitalRead(btn_left_pin);
  if(current_state_left_btn != last_state_left_btn){
      if(current_state_left_btn == true){
          new_cactus = update_object(5,xpos++,mask_CACTUS);
          update_object_in_grid(&last_cactus,&new_cactus);
          last_cactus = new_cactus;
          tft_print_grid();

      }
      delay(50);
  }
  last_state_left_btn = current_state_left_btn;
}
void btn_right_push(){
  current_state_right_btn = digitalRead(btn_right_pin);
  if(current_state_right_btn != last_state_right_btn){
      if(current_state_right_btn == true){
          new_cactus = update_object(5,xpos--,mask_CACTUS);
          update_object_in_grid(&last_cactus,&new_cactus);
          last_cactus = new_cactus;
          tft_print_grid();
      }
      delay(50);
  }
  last_state_right_btn = current_state_right_btn;
}


void setup() {
  pinMode(btn_left_pin, INPUT);
  pinMode(btn_right_pin, INPUT);
  tft.begin();
  tft.setRotation(1);
  tft.fillScreen(TFT_BLACK);



  generate_grid();
  

  last_cactus = update_object(5,5,mask_CACTUS);

  tft_print_grid();
  
}

void loop() {
  btn_left_push();
  btn_right_push();
    
}


